def levenshtein_distance(s, t):
    """
    Calculate the Levenshtein distance between two strings s and t.
    """
    m, n = len(s), len(t)
    d = [[0] * (n+1) for _ in range(m+1)]
    for i in range(m+1):
        d[i][0] = i
    for j in range(n+1):
        d[0][j] = j
    for j in range(1, n+1):
        for i in range(1, m+1):
            if s[i-1] == t[j-1]:
                d[i][j] = d[i-1][j-1]
            else:
                d[i][j] = 1 + min(d[i-1][j], d[i][j-1], d[i-1][j-1])
    return d[m][n]

def string_similarity(s1, s2):
    """
    Calculate the similarity between two strings s1 and s2 using the Levenshtein distance algorithm.
    The similarity is the inverse of the Levenshtein distance normalized by the length of the longer string.
    """
    distance = levenshtein_distance(s1, s2)
    max_len = max(len(s1), len(s2))
    min_len = min(len(s1), len(s2))
    similarity = 1 - (distance / max_len)
    return similarity

def checker(s1, s2):
    
    diff = len(s2) - len(s1)
    max_score = 0
    for i in range(diff):
        score = string_similarity(s1, s2[i:i+len(s1)])
        if score > max_score:
            max_score=score
    return max_score

###ALL of the above is the Fitness! Jonahs Fitness!!!


        
checker('aaa', "aabbddjhaaabg",)

###Jonahs Crossover functions!!!
# Pretty much the same but len of parent is nb
def crossover(parent1, parent2):
    midpoint = random.randint(0, len(parent1))
    child = parent1[:midpoint] + parent2[midpoint:]
    return child

crossover("aaa",'bbb')

###JOnahs Mututate
allowed_notes = ["a", 'b', 'c', 'd', 'e', 'f', 'g']

def mutate(s1):
    notes = list(s1)
    for i in range(len(notes)):
        if random.random() < MUTATION_RATE:
            notes[i] = random.choice(allowed_notes)
    return str(notes)

mutate("aaaa")
